#+TITLE: Potato Bootloader TODO

* Project
** TODO Write a build system with rust
*** TODO Integrate with other project
I want a way to integrate other build systems for this
so the kernel project can just reference the bootloader build system
for infomation like bootloader executable location so the kernel
can bundle the final image
* EFI Interface
** DONE Move the EFI Stuff to a library
** TODO Wrap all the function pointers in a function wrapper
** TODO Cleanup the API
*** TODO Cleanup the Interfaces
**** TODO lib.rs
**** TODO fs.rs
**** TODO graphics.rs
*** TODO Remove pub from stuff that don't need it
**** TODO lib.rs
**** TODO fs.rs
**** TODO graphics.rs
*** TODO 80 column
**** TODO lib.rs
**** TODO fs.rs
**** TODO graphics.rs
*** DONE Comments
**** DONE lib.rs
**** DONE fs.rs
**** DONE graphics.rs
*** TODO Struct Field alignment
**** TODO lib.rs
**** TODO fs.rs
**** TODO graphics.rs
*** TODO Remove panics and replace those with results or options
**** TODO lib.rs
**** TODO fs.rs
**** TODO graphics.rs
*** TODO Move stuff to files
**** TODO Move the memory stuff to it's own file
* Bootloader
** DONE File Loading
** DONE Option Parsing
** TODO Load the font data for the kernel
** TODO Load the kernel
*** TODO Find a format to use (ELF/PE+/BOTH)
*** TODO Parse the kernel from the format and load it in to memory
** TODO GOP (Graphics Output Protocol)
*** TODO Get the framebuffer
*** TODO Create an API for the Kernel to use the framebuffer
*** TODO Respect the pixel format and pack the pixels in the right order
** TODO Bring up more cores
*** TODO Add some locks
*** TODO Kernel needs to know the cores
** DONE Get the memory map
** TODO Enter the kernel
*** TODO Pass the Memory map
*** TODO Pass the Framebuffer
*** TODO Pass the Font data
*** TODO Pass the Options
